# @file build-deploy.yml
# @brief This file is the configuration for the build-deploy in GitHub.
# @author Spices.

# configuration name
name: build-deploy

# workflow trigger
on:
  
  # On Pushed
  push:
    branches: [ "main" ]
  
  # On Pull Request
  pull_request:
    branches: [ "main" ]

# workflow jobs
jobs:
  
  # Build Job
  build-wasm:
    
    # Platform: Ubuntu
    runs-on: ubuntu-latest

    # Build Steps
    steps:

    # Checkout recursive
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    # Set Emscripten
    - name: Set up Emscripten
      uses: mymindstorm/setup-emsdk@v13
      with:
        version: 'latest'

    # Cache emsdk
    - name: Cache Emscripten
      uses: actions/cache@v3
      with:
        path: |
          ~/.emsdk
          ~/.emscripten_cache
        key: ${{ runner.os }}-emsdk-${{ steps.setup-emsdk.outputs.emsdk-version }}

    # Build Solution with Release Configuration
    - name: Build Release
      shell: cmd
      working-directory: ./Scripts/BuildEntry/
      run: bash ./gmake_build_release_wasm.sh

    # Upload wasm and js
    - name: Upload artifacts
      uses: actions/upload-artifact@v3.1.2
      with:
        name: wasm-artifacts
        path: Neptune/static/wasm/
        retention-days: 3

  # Deploy Job
  deploy:

    # Need build-wasm first
    needs: build-wasm

    # Platform: Ubuntu
    runs-on: ubuntu-latest

    # Deploy Steps
    steps:
      - uses: actions/checkout@v4

      # Download wasm and js
      - name: Download artifacts
        uses: actions/download-artifact@v3.1.2
        with:
          name: wasm-artifacts
          path: Neptune/static/wasm/

      # Set Node.js
      - uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'

      # Npm Install
      - name: Npm Install
        working-directory: ./Nepnep
        run: npm ci

      # Npm Build
      - name: Npm Build
        working-directory: ./Nepnep
        run: npm run build

      # Deploy to Vercel
      - name: Deploy to Vercel
        run: vercel --prod --token ${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}